// Tide calculations are based on this website:
//
// http://www.math.stonybrook.edu/~tony/tides/prime_lag.html
//
// We are only taking into account the Lunar effects (biggest factor)
// (IIRC there are ~23 different factors that affect the tide)
//
// Assume "moon's orbits
// were circular and in the same plane, and if the axis of the earth's rotation
// were perpendicular to that plane."
//
class Tide {
  function void drawAxes() {
    // draw axes & tickmarks
    do Screen.drawLine(40,0,40,235);
    do Screen.drawLine(160,230,160,235);
    do Screen.drawLine(280,230,280,235);
    do Screen.drawLine(400,230,400,235);
    do Screen.drawLine(40,230,511,230);
    do Tide.horizLineDash(40,511,115);
    do Output.moveCursor(0,0);
    do Output.printString("+5FT");
    do Output.moveCursor(10,0);
    do Output.printString(" 0FT");
    do Output.moveCursor(20,0);
    do Output.printString("-5FT");
    do Output.moveCursor(22,3);
    do Output.printString("00:00");
    do Output.moveCursor(22,18);
    do Output.printString("06:00");
    do Output.moveCursor(22,33);
    do Output.printString("12:00");
    do Output.moveCursor(22,48);
    do Output.printString("18:00");
    return;
  }
  function void horizLineDash(int x1, int x2, int y) {
    while (x1 < x2) {
      do Screen.drawPixel(x1,y);
      let x1 = x1 + 2;
    }
    return;
  }
  function void drawTides() {
    // every 120 pixels is 6 hours
    // every 480 pixels is 24 hours, which is 360 degrees
    var int x,y; // pixel location on x-axis
    var Cosine cos; // object needed to initialize cosine lookup array
    let x = 40;
    let cos = Cosine.new();
    do Screen.setColor(true);
    while (x < 511) {
      let y = 115 + cos.cosine(x);
      // let y = 140;
      do Screen.drawPixel(x,y);
      let x = x + 1;
    }
    return;
  }
}
